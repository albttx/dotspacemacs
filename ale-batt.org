
* SPACEMACS INIT
Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values.

#+BEGIN_SRC emacs-lisp :exports none
(defun dotspacemacs/init ()
  (setq-default
#+END_SRC

** Editing style
 One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
 variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
 uses emacs key bindings for vim's insert mode, but otherwise leaves evil
 unchanged. (default 'vim)

#+BEGIN_SRC emacs-lisp
   dotspacemacs-editing-style 'vim
#+END_SRC
** Verbose loading
 Specify the startup banner. Default value is `official', it displays
 the official spacemacs logo. An integer value is the index of text
 banner, `random' chooses a random text banner in `core/banners'
 directory. A string value must be a path to an image format supported
 by your Emacs build.
 If the value is nil then no banner is displayed. (default 'official)

#+BEGIN_SRC emacs-lisp
   dotspacemacs-verbose-loading nil
#+END_SRC

** Startup
*** banner
   List of items to show in the startup buffer. If nil it is disabled.
   Possible values are: `recents' `bookmarks' `projects'.
   (default '(recents projects))
#+BEGIN_SRC emacs-lisp
   dotspacemacs-startup-banner 'official
#+END_SRC
*** lists
   List of themes, the first of the list is loaded when spacemacs starts.
   Press <SPC> T n to cycle to the next theme in the list (works great
   with 2 themes variants, one dark and one light)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-startup-lists '(recents projects)
#+END_SRC


** THEMES
   List of themes, the first of the list is loaded when spacemacs starts.
   Press <SPC> T n to cycle to the next theme in the list (works great
   with 2 themes variants, one dark and one light)

#+BEGIN_SRC emacs-lisp
  dotspacemacs-themes '(
                           deeper-blue
						   solarized-dark
						   spacemacs-dark
						   spacemacs-light
						   solarized-light
						   leuven
						   monokai
						   zenburn)
#+END_SRC

** Colorize cursor
   If non nil the cursor color matches the state color.
#+BEGIN_SRC emacs-lisp
   dotspacemacs-colorize-cursor-according-to-state t
#+END_SRC

** Font
   Default font. `powerline-scale' allows to quickly tweak the mode-line
   size to make separators look not too crappy.
#+BEGIN_SRC emacs-lisp
dotspacemacs-default-font '("Monaco"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
#+END_SRC

** Leader key
*** Key
The leader key

#+BEGIN_SRC emacs-lisp
   dotspacemacs-leader-key "SPC"
#+END_SRC
*** Emacs key
     The leader key accessible in `emacs state' and `insert state'
   (default "M-m")

#+BEGIN_SRC emacs-lisp


    dotspacemacs-emacs-leader-key "M-m"
#+END_SRC
*** Major mode
**** leader key
     Major mode leader key is a shortcut key which is the equivalent of
   pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
#+BEGIN_SRC emacs-lisp
   dotspacemacs-major-mode-leader-key ","
#+END_SRC
**** emacs key
     Major mode leader key accessible in `emacs state' and `insert state'.
   (default "C-M-m)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
#+END_SRC



** Command key
   The command key used for Evil commands (ex-commands) and
   Emacs commands (M-x).
   By default the command key is `:' so ex-commands are executed like in Vim
   with `:' and Emacs commands are executed with `<leader> :'.
#+BEGIN_SRC emacs-lisp
   dotspacemacs-command-key ":"
#+END_SRC


** Remap
   If non nil `Y' is remapped to `y$'. (default t)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-remap-Y-to-y$ t
#+END_SRC
** Auto save
   Location where to auto-save files. Possible values are `original' to
   auto-save the file in-place, `cache' to auto-save the file to another
   file stored in the cache directory and `nil' to disable auto-saving.
   (default 'cache)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-auto-save-file-location 'cache
#+END_SRC

** Ido
   If non nil then `ido' replaces `helm' for some commands. For now only
   `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   `find-contrib-file' (SPC f e c) are replaced. (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-use-ido nil
#+END_SRC
** Helm
*** resize
   If non nil, `helm' will try to miminimize the space it uses. (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-helm-resize nil
#+END_SRC
*** header
   if non nil, the helm header is hidden when there is only one source.
   (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-helm-no-header nil
#+END_SRC
*** position
   define the position to display `helm', options are `bottom', `top',
   `left', or `right'. (default 'bottom)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-helm-position 'bottom
#+END_SRC



** Paste micro state
  If non nil the paste micro-state is enabled. When enabled pressing `p`
  several times cycle between the kill ring content. (default nil)

#+BEGIN_SRC emacs-lisp
  dotspacemacs-enable-paste-micro-state nil
#+END_SRC
** Key
*** delay
   Which-key delay in seconds. The which-key buffer is the popup listing
   the commands bound to the current keystroke sequence. (default 0.4)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-which-key-delay 0.4
#+END_SRC

*** position
   Which-key frame position. Possible values are `right', `bottom' and
   `right-then-bottom'. right-then-bottom tries to display the frame to the
   right; if there is insufficient space it displays it at the bottom.
   (default 'bottom)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-which-key-position 'bottom
#+END_SRC
** Progress bar
   If non nil a progress bar is displayed when spacemacs is loading. This
   may increase the boot time on some systems and emacs builds, set it to
   nil to boost the loading time. (default t)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-loading-progress-bar t
#+END_SRC
** Fullscreen
*** Start up size
   If non nil the frame is fullscreen when Emacs starts up. (default nil)
   (Emacs 24.4+ only)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-fullscreen-at-startup t
#+END_SRC
*** native init
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-fullscreen-use-non-native nil
#+END_SRC

** Frame
   If non nil the frame is maximized when Emacs starts up.
   Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   (default nil) (Emacs 24.4+ only)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-maximized-at-startup nil
#+END_SRC
** Transparency
*** active
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's active or selected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-active-transparency 90
#+END_SRC
*** inactive
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's inactive or deselected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-inactive-transparency 90
#+END_SRC
** Unicode
   If non nil unicode symbols are displayed in the mode line. (default t)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-mode-line-unicode-symbols t
#+END_SRC
** Scrolling
   If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   scrolling overrides the default behavior of Emacs which recenters the
   point when it reaches the top or bottom of the screen. (default t)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-smooth-scrolling t
#+END_SRC
** Smartparens
   If non-nil smartparens-strict-mode will be enabled in programming modes.
   (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-smartparens-strict-mode nil
#+END_SRC
** Delimiters
   Select a scope to highlight delimiters. Possible values are `any',
   `current', `all' or `nil'. Default is `all' (highlight any scope and
   emphasis the current one). (default 'all)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-highlight-delimiters 'all
#+END_SRC
** Server
   If non nil advises quit functions to keep server open when quitting.
   (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-persistent-server nil
#+END_SRC

** Search
   List of search tool executable names. Spacemacs uses the first installed
   tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   (default '("ag" "pt" "ack" "grep"))
#+BEGIN_SRC emacs-lisp
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
#+END_SRC

** Package repository

   The default package repository used if no explicit repository has been
   specified with an installed package.
   Not used for now. (default nil)
#+BEGIN_SRC emacs-lisp
   dotspacemacs-default-package-repository nil
#+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
     ))
#+END_SRC

* USER CONFIGURATION
** User Init

Initialization function for user code. It is called immediately after
`dotspacemacs/init'.

#+BEGIN_SRC emacs-lisp :exports none
  (defun dotspacemacs/user-init ()
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
    )
#+END_SRC

** User config

Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
 layers configuration. You are free to put any user code.

#+BEGIN_SRC emacs-lisp :exports none
  (defun dotspacemacs/user-config ()
#+END_SRC
*** Packages
**** Git-gutter
#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode +1)
  (custom-set-variables
     '(git-gutter:update-interval 2))

#+END_SRC

**** Go(lang)
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-copy-env "GOPATH")
(setq gofmt-command "goimports")

(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))
#+END_SRC

**** Projectile

#+BEGIN_SRC emacs-lisp
(add-to-list 'projectile-globally-ignored-directories "node_modules")
#+END_SRC

**** Peep-dired

#+BEGIN_SRC emacs-lisp
(setq peep-dired-cleanup-eagerly t)
#+END_SRC

*** Key unset
Unset key "CMD + p" for refuse printing buffer
If choose is no, Emacs.app SEGFAULT

#+BEGIN_SRC emacs-lisp
 (global-unset-key (kbd "s-p"))
#+END_SRC

Solve error: ls does not support --dired; see `dired-use-ls-dired` for more details.
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+END_SRC

*** Windows manipulation

 TODO: Active windmove by default

  (global-set-key (kbd "s <left>")  'windmove-left)
  (global-set-key (kbd "s <right>") 'windmove-right)
  (global-set-key (kbd "s <up>")    'windmove-up)
  (global-set-key (kbd "s <down>")  'windmove-down)
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

 make Vim `:q` kill buffer rather than window

#+BEGIN_SRC emacs-lisp
  (evil-ex-define-cmd "qw" 'kill-buffer-and-window )
  ;; (evil-ex-define-cmd "qw" (lambda () (spacemacs/new-empty-buffer) (kill-buffer-and-window) ))
  (evil-ex-define-cmd "q[uit]" 'kill-this-buffer )
#+END_SRC

 Change window with CMD + [ or ]

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "s-[") (lambda () (interactive) (other-window -1)))
  ;; (global-set-key (kbd "s-]") (lambda () (interactive) (other-window +1)))
#+END_SRC

*** Workspace manipulation

 Change eyebrowse workspace with CMD shift [ or ] //  CMD { or }

#+BEGIN_SRC emacs-lisp
 (define-key evil-motion-state-map (kbd "s-}") 'eyebrowse-next-window-config)
 (define-key evil-motion-state-map (kbd "s-{") 'eyebrowse-prev-window-config)
 (define-key evil-motion-state-map (kbd "<s-backspace>") 'eyebrowse-close-window-config)
#+END_SRC

*** Wrap

Set no wrap
Line don't return to line
#+BEGIN_SRC emacs-lisp
(add-hook 'hack-local-variables-hook (lambda () (setq truncate-lines t)))
#+END_SRC

*** Tabulation

 SET <TAB> as \t

/!\ Currently working on it !

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)
(setq-default indent-line-function 'insert-tab)
(setq-default c-basic-offset 4)
(global-set-key (kbd "TAB") 'self-insert-command);
#+END_SRC

*** Fixes

#+BEGIN_SRC emacs-lisp
(require 'tramp)
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
    )
#+END_SRC

* LAYER CONFIG
 Configuration Layers declaration.
 You should not put any user code in this function besides modifying the variable
 values."

#+BEGIN_SRC emacs-lisp :exports none
  (defun dotspacemacs/layers ()
    (setq-default
#+END_SRC

** Distribution
Base distribution to use. This is a layer contained in the directory
`+distribution'. For now available distributions are `spacemacs-base'
or `spacemacs'. (default 'spacemacs)

#+BEGIN_SRC emacs-lisp
   dotspacemacs-distribution 'spacemacs
#+END_SRC

** Layer path
   List of additional paths where to look for configuration layers.
   Paths must have a trailing slash (i.e. `~/.mycontribs/')

#+BEGIN_SRC emacs-lisp
   dotspacemacs-configuration-layer-path '(
   )
#+END_SRC

** Layer
   List of configuration layers to load. If it is the symbol `all' instead
   of a list then all discovered layers will be installed.

   ----------------------------------------------------------------
   Example of useful layers you may want to use right away.
   Uncomment some layer names and press <SPC f e R> (Vim style) or
   <M-m f e R> (Emacs style) to install them.
   ----------------------------------------------------------------

#+BEGIN_SRC emacs-lisp :exports none
    dotspacemacs-configuration-layers
    '(
#+END_SRC

*** Languages

**** Go (lang)
#+BEGIN_SRC emacs-lisp
    (go :variables
        go-tab-width 4
        gofmt-command "goimports")
#+END_SRC

**** Rust
#+BEGIN_SRC emacs-lisp
    (rust)
#+END_SRC

**** Lisp
#+BEGIN_SRC emacs-lisp
    emacs-lisp
#+END_SRC

**** Yaml
#+BEGIN_SRC emacs-lisp
    yaml
#+END_SRC

**** Yaml
#+BEGIN_SRC emacs-lisp
    yaml
#+END_SRC

**** Python
#+BEGIN_SRC emacs-lisp
    python
#+END_SRC
**** Php
#+BEGIN_SRC emacs-lisp
    php
#+END_SRC

**** Sql
#+BEGIN_SRC emacs-lisp
    sql
#+END_SRC

**** Markdown
#+BEGIN_SRC emacs-lisp
    markdown
#+END_SRC
**** Docker
#+BEGIN_SRC emacs-lisp
    docker
#+END_SRC

**** Terraform
#+BEGIN_SRC emacs-lisp
    terraform
#+END_SRC

*** Syntax checking
	
#+BEGIN_SRC emacs-lisp
    syntax-checking
#+END_SRC

*** Autocompletion

#+BEGIN_SRC emacs-lisp
auto-completion
#+END_SRC

*** Colors
#+BEGIN_SRC emacs-lisp
     colors
     (colors :variables colors-enable-nyan-cat-progress-bar t)
#+END_SRC
*** Jabber
#+BEGIN_SRC emacs-lisp
     jabber
#+END_SRC
*** Eyebrowse
#+BEGIN_SRC emacs-lisp
  ;; eyebrowse
#+END_SRC
*** Evil Commentary
#+BEGIN_SRC emacs-lisp
     evil-commentary
#+END_SRC
*** Osx
#+BEGIN_SRC emacs-lisp
     osx
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
     org
     (shell :variables
             shell-default-height 30
             shell-default-position 'bottom)
     syntax-checking
#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
     git
#+END_SRC

*** Ruby on Rails

This layer aims at providing support for the Ruby on Rails framework.
#+BEGIN_SRC emacs-lisp
	ruby-on-rails
#+END_SRC
*** html - Web mode

#+BEGIN_SRC emacs-lisp
	html
	javascript
#+END_SRC

*** Restclient
#+BEGIN_SRC emacs-lisp
restclient
#+END_SRC

*** Still in comment
#+BEGIN_SRC emacs-lisp
     ;; auto-completion
     ;; better-defaults
     ;; markdown
     ;; version-control
     ;; spell-checking
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  )
#+END_SRC
** Packages
*** Additional
 List of additional packages that will be installed without being
 wrapped in a layer. If you need some configuration for these
 packages then consider to create a layer, you can also put the
 configuration in `dotspacemacs/config'.

#+BEGIN_SRC emacs-lisp
 dotspacemacs-additional-packages '(
    peep-dired
    protobuf-mode
    git-gutter
    go-autocomplete
    flycheck-golangci-lint
 )
#+END_SRC
*** Excluded
 A list of packages and/or extensions that will not be install and loaded.

#+BEGIN_SRC emacs-lisp
   dotspacemacs-excluded-packages '()
#+END_SRC

*** Orphan
 If non-nil spacemacs will delete any orphan packages, i.e. packages that
 are declared in a layer which is not a member of
 the list `dotspacemacs-configuration-layers'. (default t)

#+BEGIN_SRC emacs-lisp
    dotspacemacs-delete-orphan-packages t
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
    ))
#+END_SRC
